<?php
/**
 * @file
 * Code for the Dekyll Post feature.
 */

include_once 'dekyll_page.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Help the file name creation for post content type.
 *
 * @todo: Add validate to make sure file is under _posts.
 */
function dekyll_page_form_post_node_form_alter(&$form, $form_state) {
  $file_path_parts = array();

  if ($default_value = &$form['field_file_path'][LANGUAGE_NONE][0]['value']['#default_value']) {
    // @todo: Fix when directory is _drafts.
    $file_path_parts = explode('/', $default_value, 2);
    $path_info = pathinfo(substr($file_path_parts[1], 11));

    $default_value = $path_info['filename'];
    $extension = $path_info['extension'];
  }
  else {
    $extension = 'md';
  }

  // Add elements to select the directory and date prefix of the post file.
  $element = array();
  $element['directory'] = array(
    '#title' => t('Directory'),
    '#title_display' => 'invisible',
    '#type' => 'select',
    '#options' => array(
      '_posts' => '_posts',
      '_drafts' => '_drafts',
    ),
    '#weight' => -10,
    '#default_value' => !empty($file_path_parts) ? $file_path_parts[0] : '_posts',
  );

  $element['file_date'] = array(
    '#title' => t('File date'),
    '#title_display' => 'invisible',
    '#date_label_position' => 'invisible',
    '#type' => 'date_popup',
    '#date_format' => 'Y-m-d',
    '#weight' => -5,
    '#default_value' => !empty($file_path_parts) ? substr($file_path_parts[1], 0, 10) : date('Y-m-d'),
    '#size' => 10,
    '#prefix' => '<div class="prefix-float">/</div>',
    '#suffix' => '<div class="suffix-float">-</div>',

    // Hide this field, if "_drafts" folder is selected, as the date isn't
    // needed on that folder (since the post isn't published yet).
    '#states' => array(
      'visible' => array(
        ':input[name="field_file_path[und][0][directory]"]' => array('value' => '_posts'),
      ),
    ),
  );

  $element['extension'] = array(
    '#title' => t('Extension'),
    '#title_display' => 'invisible',
    '#type' => 'select',
    '#options' => array(
      'md' => 'md',
      'html' => 'html',
    ),
    '#default_value' => $extension,
    '#weight' => 10,
    '#prefix' => '<div class="prefix-float">.</div>',
  );

  $form['field_file_path'][LANGUAGE_NONE][0] += $element;
  $form['field_file_path'][LANGUAGE_NONE][0]['value']['#title_display'] = 'invisible';
  $form['field_file_path'][LANGUAGE_NONE][0]['value']['#attached']['js'][] = drupal_get_path('module', 'dekyll_page') . '/js/dekyll_page.js';
  $form['field_file_path'][LANGUAGE_NONE][0]['value']['#attached']['css'][] = drupal_get_path('module', 'dekyll_page') . '/css/dekyll_page.css';

  // Allow floating the inner elements.
  $form['field_file_path']['#attributes']['class'][] = 'clearfix';

  $form['field_file_path'][LANGUAGE_NONE][0]['value']['#element_validate'][] = 'dekyll_page_field_file_path_element_validate';
}

/**
 * Element validate; Prefix the file name with "_posts".
 */
function dekyll_page_field_file_path_element_validate($element, &$form_state) {
  $values = $form_state['values']['field_file_path'][LANGUAGE_NONE][0];

  $file_date = $values['directory'] == '_posts' ? $values['file_date']['date'] . '-' : '';
  $file_path = $values['directory'] . '/' . $file_date . $values['value'] . '.' . $values['extension'];
  form_set_value($element, $file_path, $form_state);
}

/**
 * Implements hook_node_insert().
 */
function dekyll_page_node_insert($node) {
  dekyll_page_queue_export($node);
}

/**
 * Implements hook_node_update().
 */
function dekyll_page_node_update($node) {
  dekyll_page_queue_export($node);
}

/**
 * Create a queue item, in order to write a node to file.
 *
 * @param $node
 *   The node to be written.
 */
function dekyll_page_queue_export($node) {
  if (!isset($node->field_file_path)) {
    return;
  }

  if (!empty($node->_dekyll_sync)) {
    // Node is created or updated on sync.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  $queue = DrupalQueue::get('dekyll_export');
  $data = array(
    'gid' => $wrapper->{OG_AUDIENCE_FIELD}->value(array('identifier' => TRUE)),
    'nid' => $node->nid,
    // Get the branch of the node.
    'branch' => dekyll_repository_get_git_branch($node),
    'commit_message' => '',
  );
  $queue->createItem($data);
}

/**
 * Get the permalink of a page or post.
 *
 * @todo: Deal with absolute VS relative path.
 */
function dekyll_page_get_permalink($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  $permalink = $wrapper->field_permalink->value();

  if ($node->type == 'post' && $permalink) {
    return $permalink;
  }

  // @todo: See how permalink works on pages.
  return $wrapper->field_file_path->value();
}


/**
 * Implements hook_node_view_alter().
 */
function dekyll_page_node_view_alter(&$build) {
  $node = $build['#node'];
  if (empty($node->nid)) {
    // Node isn't saved yet (e.g. node preview).
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (!isset($wrapper->field_file_path)) {
    return;
  }

  if (!$setting = $wrapper->field_repo_branch->field_jekyll_base_path->value()) {
    return;
  }

  switch ($setting) {
    case 'local':
      $base = 'http://localhost:4000';
      break;

    case 'config':
      // @todo: Read from _config.yml
      break;

    case 'other':
      $base = $wrapper->field_repo_branch->field_jekyll_base_path_url->value();
  }

  // @todo: How to deal with non-pages?
  // @todo: Deal with permalink.
  $url = $base . '/' . dekyll_page_get_permalink($node);

  // @todo: Add option to disable IFrame?
  $build['dekyll_site'] = array(
    '#weight' => -99,
    'link' => array('#markup' => l('See page', $url)),
    'iframe' => array('#markup' => "<div><iframe style='width: 100%; height: 600px;' src='$url'></iframe></div>"),
  );
}
