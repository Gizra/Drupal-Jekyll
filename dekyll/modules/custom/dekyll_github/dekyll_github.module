<?php
/**
 * @file
 * Code for the Dekyll Github.
 */

use Github\Client;
use Github\HttpClient\CachedHttpClient;

/**
 * Implements hook_menu().
 */
function dekyll_github_menu() {
  $items = array();

  $items['create-repository'] = array(
    'title' => 'Create Repository on Github',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dekyll_github_create_repository_github'),
    // @todo: Add access to github.
    'access callback' => 'user_is_logged_in',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Page callback; Create a new repository in Github.
 */
function dekyll_github_create_repository_github() {
  $params = array(
    '@github-account' => '',
  );

  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Repository name'),
    '#description' => t('The name of the repository that should be created under account @github-account in Github.', $params),
    '#required' => TRUE,
    // @todo: Add validate.
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Create'),
  );

  return $form;
}


/**
 * Submit handler; Add "Create Repository" queue item.
 */
function dekyll_github_create_repository_github_submit() {
  global $user;
  $queue = DrupalQueue::get('dekyll_create_repository_github');
  $data = array(
    'uid' => $user->uid,
  );
  $queue->createItem($data);
}

/**
 * For repository,
 *
 * @param $uid
 */
function dekyll_github_create_repository_github($uid) {
  $account = user_load($uid);
  if (!$token = dekyll_github_get_user_token($account)) {
    // No access token.
    return;
  }

  $client = new Github\Client(
    new Github\HttpClient\CachedHttpClient(array('cache_dir' => 'temporary://github-api-cache'))
  );

  $client->authenticate($token, NULL, Github\Client::AUTH_HTTP_TOKEN);

  $github_account = $client->api('current_user')->show();
  $github_username = $github_account['login'];

  $repo_name = $github_username . '/jekyll-bootstrap';

  try {
    $repo = $client->api('repo')->show($github_username, 'jekyll-bootstrap');
    // Repository already exists.
    return;
  }
  catch (Exception $e) {
    $client->api('repo')->forks()->create('Gizra', $repo_name);
  }


  // Create a repository and branch nodes.
  $repo_node = (object)array(
    'type' => 'repository',
    'uid' => $account->uid,
    'title' => $repo_name,
  );

  node_object_prepare($repo_node);
  $wrapper = entity_metadata_wrapper('node', $repo_node);
  $wrapper->{OG_GROUP_FIELD}->set(TRUE);
  $wrapper->{OG_GROUP_FIELD}->set(TRUE);
  $wrapper->field_repo_url->set('https://github.com/' . $repo_name);
  $wrapper->field_repo_credentials->set('git@github.com:' . $repo_name);
  $wrapper->field_repo_canonical->set(FALSE);
  $wrapper->save();

  $branch_node = (object)array(
    'type' => 'branch',
    'uid' => $user->uid,
    'title' => 'gh-pages',
  );

  node_object_prepare($branch_node);
  $wrapper = entity_metadata_wrapper('node', $branch_node);
  $wrapper->{OG_AUDIENCE_FIELD}->set($repo_node);
  $wrapper->field_jekyll_base_path->set('config');
  $wrapper->save();
}


/**
 * Get Github access token.
 *
 * @param null $account
 * @return mixed
 */
function dekyll_github_get_user_token($account = NULL) {
  if (!$account) {
    global $user;
    $account = clone $user;
  }

  if (!$result = db_query("SELECT access_token FROM {github_connect_users} WHERE uid = :uid", array(':uid' => $account->uid))->fetchCol()) {
    return;
  }
  return str_replace(array('access_token=', '&token_type=bearer'), '', $result[0]);
}